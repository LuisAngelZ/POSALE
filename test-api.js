// test-api.js - Guarda este archivo en la ra√≠z del proyecto D:\POS_VENTA\test-api.js
const config = require('./server/config/config');

const BASE_URL = `http://localhost:${config.PORT}`;
let authToken = '';

// Funci√≥n helper para hacer requests
async function makeRequest(method, endpoint, data = null, useAuth = false) {
    const url = `${BASE_URL}${endpoint}`;
    
    const options = {
        method,
        headers: {
            'Content-Type': 'application/json',
        }
    };

    if (useAuth && authToken) {
        options.headers.Authorization = `Bearer ${authToken}`;
    }

    if (data) {
        options.body = JSON.stringify(data);
    }

    try {
        const response = await fetch(url, options);
        const result = await response.json();
        
        console.log(`${method} ${endpoint}:`, response.status);
        if (!response.ok) {
            console.log('‚ùå Error:', result.message);
        } else {
            console.log('‚úÖ Success');
        }
        
        return { success: response.ok, data: result, status: response.status };
    } catch (error) {
        console.error(`‚ùå Error en ${method} ${endpoint}:`, error.message);
        return { success: false, error: error.message };
    }
}

async function testAPIs() {
    console.log('üß™ Iniciando pruebas completas de APIs del sistema POS...\n');
    console.log(`üìç URL Base: ${BASE_URL}\n`);
    
    try {
        // 1. Probar conexi√≥n del servidor
        console.log('1Ô∏è‚É£ PROBANDO CONEXI√ìN DEL SERVIDOR...');
        console.log('=' .repeat(50));
        const serverTest = await makeRequest('GET', '/api/test');
        if (!serverTest.success) {
            throw new Error('‚ùå Servidor no est√° funcionando');
        }
        console.log('‚úÖ Servidor funcionando correctamente');
        console.log('üìÑ Mensaje:', serverTest.data.message);
        console.log('');

        // 2. Probar autenticaci√≥n
        console.log('2Ô∏è‚É£ PROBANDO AUTENTICACI√ìN...');
        console.log('=' .repeat(50));
        
        // Login con credenciales por defecto
        console.log('üîê Intentando login con usuario admin...');
        const loginResult = await makeRequest('POST', '/api/auth/login', {
            username: 'admin',
            password: '123456'
        });
        
        if (loginResult.success) {
            authToken = loginResult.data.token;
            console.log('‚úÖ Login exitoso');
            console.log('üë§ Usuario:', loginResult.data.user.full_name);
            console.log('üîë Token obtenido correctamente');
        } else {
            console.log('‚ùå Error en login:', loginResult.data.message);
            throw new Error('No se pudo autenticar');
        }
        console.log('');

        // 3. Verificar token
        console.log('3Ô∏è‚É£ VERIFICANDO TOKEN...');
        console.log('=' .repeat(50));
        const verifyResult = await makeRequest('POST', '/api/auth/verify-token', null, true);
        if (verifyResult.success) {
            console.log('‚úÖ Token v√°lido');
            console.log('üë§ Usuario verificado:', verifyResult.data.user.username);
        }
        console.log('');

        // 4. Probar categor√≠as
        console.log('4Ô∏è‚É£ PROBANDO APIs DE CATEGOR√çAS...');
        console.log('=' .repeat(50));
        
        // Obtener categor√≠as existentes
        console.log('üìã Obteniendo categor√≠as...');
        const categoriesResult = await makeRequest('GET', '/api/categories', null, true);
        console.log(`üìä Categor√≠as encontradas: ${categoriesResult.data.categories?.length || 0}`);
        
        // Crear nueva categor√≠a
        console.log('‚ûï Creando nueva categor√≠a...');
        const newCategoryResult = await makeRequest('POST', '/api/categories', {
            name: 'Postres',
            description: 'Postres y dulces deliciosos'
        }, true);
        
        if (newCategoryResult.success) {
            console.log('‚úÖ Categor√≠a creada:', newCategoryResult.data.category.name);
        }
        console.log('');

        // 5. Probar productos
        console.log('5Ô∏è‚É£ PROBANDO APIs DE PRODUCTOS...');
        console.log('=' .repeat(50));
        
        // Obtener productos existentes
        console.log('üõçÔ∏è Obteniendo productos...');
        const productsResult = await makeRequest('GET', '/api/products', null, true);
        console.log(`üìä Productos encontrados: ${productsResult.data.products?.length || 0}`);
        
        // Crear nuevo producto
        console.log('‚ûï Creando nuevo producto...');
        const newProductResult = await makeRequest('POST', '/api/products', {
            name: 'Pizza Margherita',
            description: 'Pizza con tomate, mozzarella y albahaca fresca',
            price: 35.50,
            category_id: 1,
            stock: 20
        }, true);
        
        if (newProductResult.success) {
            console.log('‚úÖ Producto creado:', newProductResult.data.product.name);
            console.log('üí∞ Precio:', newProductResult.data.product.price);
        }

        // Buscar productos
        console.log('üîç Probando b√∫squeda de productos...');
        await makeRequest('GET', '/api/products/search?q=pizza', null, true);
        console.log('');

        // 6. Probar ventas
        console.log('6Ô∏è‚É£ PROBANDO APIs DE VENTAS...');
        console.log('=' .repeat(50));
        
        // Crear nueva venta
        console.log('üí∞ Creando nueva venta...');
        const newSaleResult = await makeRequest('POST', '/api/sales', {
            customer_nit: '12345678',
            customer_name: 'Mar√≠a Gonz√°lez',
            order_type: 'dine_in',
            table_number: '5',
            observations: 'Sin picante, extra queso',
            items: [
                {
                    product_id: 1,
                    quantity: 1
                },
                {
                    product_id: 2,
                    quantity: 2
                }
            ],
            paid_amount: 60.00
        }, true);
        
        if (newSaleResult.success) {
            console.log('‚úÖ Venta creada con ID:', newSaleResult.data.sale.id);
            console.log('üíµ Total:', newSaleResult.data.sale.total);
            console.log('üí∏ Cambio:', newSaleResult.data.sale.change_amount);
        }
        
        // Obtener ventas de hoy
        console.log('üìÖ Obteniendo ventas de hoy...');
        const todaySalesResult = await makeRequest('GET', '/api/sales/today', null, true);
        if (todaySalesResult.success) {
            console.log(`üìä Ventas de hoy: ${todaySalesResult.data.totals.count}`);
            console.log(`üíµ Total del d√≠a: $${todaySalesResult.data.totals.amount}`);
        }
        console.log('');

        // 7. Probar reportes
        console.log('7Ô∏è‚É£ PROBANDO APIs DE REPORTES...');
        console.log('=' .repeat(50));
        
        // Dashboard
        console.log('üìä Cargando dashboard...');
        const dashboardResult = await makeRequest('GET', '/api/reports/dashboard', null, true);
        if (dashboardResult.success) {
            console.log('‚úÖ Dashboard cargado correctamente');
            console.log(`üìà Ventas hoy: ${dashboardResult.data.dashboard.today.sales}`);
            console.log(`üí∞ Ingresos hoy: $${dashboardResult.data.dashboard.today.amount}`);
        }
        
        // Reporte diario
        console.log('üìÖ Generando reporte diario...');
        const dailyReportResult = await makeRequest('GET', '/api/reports/daily', null, true);
        if (dailyReportResult.success) {
            console.log('‚úÖ Reporte diario generado');
        }
        console.log('');

        // 8. Resumen final
        console.log('üéâ ¬°TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE!');
        console.log('=' .repeat(60));
        console.log('‚úÖ Servidor funcionando');
        console.log('‚úÖ Autenticaci√≥n (Login/Token)');
        console.log('‚úÖ Categor√≠as (CRUD)');
        console.log('‚úÖ Productos (CRUD + B√∫squeda)');
        console.log('‚úÖ Ventas (Crear + Consultar)');
        console.log('‚úÖ Reportes (Dashboard + Diario)');
        console.log('');
        console.log('üöÄ El sistema est√° listo para usar!');
        console.log('üí° Puedes acceder al sistema en:', BASE_URL);

    } catch (error) {
        console.error('\n‚ùå ERROR EN LAS PRUEBAS:', error.message);
        console.log('\nüîß SOLUCIONES POSIBLES:');
        console.log('1. Verifica que el servidor est√© ejecut√°ndose: npm run dev');
        console.log('2. Verifica que la base de datos est√© inicializada: node test-models.js');
        console.log('3. Verifica que el puerto 3000 est√© libre');
    }
}

// Ejecutar pruebas
console.log('üöÄ INICIANDO SUITE DE PRUEBAS DEL SISTEMA POS');
console.log('=' .repeat(60));

// Importar fetch para Node.js y ejecutar
async function runTests() {
    try {
        const fetch = (await import('node-fetch')).default;
        global.fetch = fetch;
        await testAPIs();
    } catch (importError) {
        console.log('‚ùå Error: node-fetch no est√° instalado');
        console.log('üí° Ejecuta: npm install node-fetch');
    }
}

runTests();